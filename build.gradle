import java.time.Year

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'idea'
    id 'java-library'
    id 'com.github.hierynomus.license' version "0.16.1" apply false
    id 'biz.aQute.bnd.builder' version '7.1.0' apply false
}

defaultTasks 'clean', 'build'

def projGroup = 'org.tools4j'
def projVersion = file('version.txt').text.trim()

def junitVersion = '5.13.4'

static def getBuildJavaVersion() {
    def buildJavaVersion = JavaVersion.current().getMajorVersion()
    if (buildJavaVersion.indexOf('.') > 0) {
        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('.'))
    }
    if (buildJavaVersion.indexOf('-') > 0) {
        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('-'))
    }
    Integer.parseInt(buildJavaVersion)
}
int buildJavaVersion = getBuildJavaVersion()

ext {
    //gradle clean build publish -PossrhUsername=mterzer -PossrhPassword=xxx

    isReleaseVersion = !projVersion.endsWith('-SNAPSHOT')
    releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

    println name + " version=" + projVersion + " release=" + isReleaseVersion

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'time'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'Java library dealing with date and time values without creating objects to be suitable for zero garbage applications'
    url = 'https://github.com/tools4j/time'

    scm {
        connection = 'scm:git:https://github.com/tools4j/time.git'
        developerConnection = 'scm:git:https://github.com/tools4j/time.git'
        url = 'https://github.com/tools4j/time.git'
    }

    licenses {
        license {
            name = 'The MIT License (MIT)'
            url = 'https://opensource.org/licenses/MIT'
        }
    }

    developers {
       developer {
            id = 'terzerm'
            name = 'Marco Terzer'
            email = 'terzerm@gmail.com'
            url = 'https://github.com/terzerm'
        }
    }
}

jar.enabled = false

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

apply plugin: 'java-library'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'biz.aQute.bnd.builder'

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

group = projGroup
version = projVersion

tasks.withType(Sign).configureEach {
    onlyIf {
        isReleaseVersion && gradle.taskGraph.hasTask(tasks.publish)
    }
}

tasks.withType(Jar).configureEach {
    enabled = true
    includeEmptyDirs = false
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.deprecation = true
}

test {
    useJUnitPlatform()
    enableAssertions = true
    jvmArgs('-Ddisable.thread.safety=true')

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    reports.html.required = true
}

license {
    header = file("${rootDir}/etc/LICENSE.template")
    strictCheck = true
    ext.year = Year.now().value
    include "**/*.java"
    mapping {
        java='SLASHSTAR_STYLE'
    }
}

compileJava.dependsOn licenseFormat

javadoc {
    title = '<h1>time</h1>'
    options.bottom = "<i>Copyright &#169; 2020-" + Year.now().getValue() + " tools4j.org (Marco Terzer, Anton Anufriev). All Rights Reserved.</i>"
    options.encoding = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.charSet = 'UTF-8'
    if (JavaVersion.current().isJava10Compatible()) {
        options.addBooleanOption 'html5', true
        options.links("https://docs.oracle.com/en/java/javase/${buildJavaVersion}/docs/api/")        }
}

task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier.set "test-${base.archivesName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

jar {
    bundle {
        // workaround for https://github.com/bndtools/bnd/issues/6346
        properties.put("project.group", provider({project.group}))
        bnd """
                Automatic-Module-Name:  org.tools4j.time
                Bundle-Name:            org.tools4j.time
                Bundle-SymbolicName:    org.tools4j.time
                Implementation-Title:   time
                Implementation-Vendor:  tools4j.org
                Implementation-Version: ${projVersion}
                -exportcontents: org.tools4j.time, org.tools4j.time.*
                # Suppress headers that reduce reproducibility.
                -reproducible: true
                -noextraheaders: true
            """
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        timeRegion(MavenPublication) {
            from components.java
            pom(projectPom)
        }
    }

    repositories {
        maven {
            url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.timeRegion
}